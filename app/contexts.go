// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "ISprime Origins API": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/maurodelazeri/image-uploader/design
// --out=$(GOPATH)/src/github.com/maurodelazeri/image-uploader
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// ShowImageContext provides the image show action context.
type ShowImageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID int
}

// NewShowImageContext parses the incoming request URL and body, performs validations and creates the
// context used by the image controller show action.
func NewShowImageContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowImageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowImageContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := strconv.Atoi(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowImageContext) OK(r *ImageMedia) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowImageContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UploadImageContext provides the image upload action context.
type UploadImageContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUploadImageContext parses the incoming request URL and body, performs validations and creates the
// context used by the image controller upload action.
func NewUploadImageContext(ctx context.Context, r *http.Request, service *goa.Service) (*UploadImageContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UploadImageContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UploadImageContext) OK(r ImageMediaCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/json; type=collection")
	if r == nil {
		r = ImageMediaCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
